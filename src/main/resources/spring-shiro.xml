<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
	xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">  
  

    <!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象。可自定义密码出错次数限制 -->  
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"></bean>  
  
    <!-- 缓存管理，也可以使用ehcache或redis -->  
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>  
  
    <!--   
      使用Shiro自带的JdbcRealm类  
      指定密码匹配所需要用到的加密对象  
      指定存储用户、角色、权限许可的数据源及相关查询语句  
    <bean id="realm" class="org.apache.shiro.realm.jdbc.JdbcRealm">  
        <property name="credentialsMatcher" ref="credentialsMatcher"></property>  
        <property name="permissionsLookupEnabled" value="true"></property>  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="authenticationQuery"  
            value="SELECT password FROM sys_user WHERE username = ?"></property>  
        <property name="userRolesQuery"  
            value="SELECT r.role FROM sys_user_role ur LEFT JOIN sys_role r ON ur.role_id=r.id LEFT JOIN sys_user u ON ur.user_id = u.id WHERE username = ?"></property>  
        <property name="permissionsQuery"  
            value="SELECT p.permission FROM sys_role_resource rp LEFT JOIN sys_role r ON rp.role_id=r.id LEFT JOIN sys_resource p ON rp.resource_id=p.id  WHERE r.role= ?"></property>  
    </bean>  
     -->  
    
     <!-- 自定义Realm实现 -->
    <bean id="realm" class="org.dimhat.example.shiro.realm.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="false"/>
    </bean>
  
    <!-- Shiro安全管理器 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="realm"></property>  
        <property name="cacheManager" ref="cacheManager"></property>  
    </bean>  
    
  	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口，这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"></property>  
    </bean>  
    
    <!-- 自定义过滤器链管理器 -->
    <bean id="filterChainManager" class="org.dimhat.example.shiro.spring.CustomDefaultFilterChainManager">
        <property name="loginUrl" value="/login"/>
        <property name="successUrl" value="/"/>
        <!-- 用户访问未对其授权的资源时，所显示的连接 -->  
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <property name="customFilters">
            <util:map>
<!--                 <entry key="authc" value-ref="formAuthenticationFilter"/> -->
<!--                 <entry key="sysUser" value-ref="sysUserFilter"/> -->
            </util:map>
        </property>
        <property name="defaultFilterChainDefinitions">
            <value>
                /=anon
                /public/**=anon
                /login = authc
                /logout = logout
                /test/url2 = authc,perms["user:view"]
                /admin/** = authc, roles[admin], perms["permission1"]
                /** = authc
            </value>
        </property>
    </bean>
     <!--
    <bean id="filterChainResolver" class="org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver">
        <property name="filterChainManager" ref="filterChainManager"/>
    </bean>
      -->
    <bean id="filterChainResolver" class="org.dimhat.example.shiro.spring.CustomPathMatchingFilterChainResolver">
        <property name="customDefaultFilterChainManager" ref="filterChainManager"/>
    </bean>
    
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="shiroFilter"/>
        <property name="targetMethod" value="setFilterChainResolver"/>
        <property name="arguments" ref="filterChainResolver"/>
    </bean>
    
    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>  
  
</beans>  